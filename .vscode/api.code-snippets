{
  "Creando un resolve para una query": {
    "prefix": "apiQuery",
    "body": [
      "/**",
      " * @typedef {import('@eclass/api').Context} Context",
      " * @typedef {import('@eclass/api').$1CustomArgs} Args",
      " * @typedef {import('@eclass/api').$2CustomPayload} Payload",
      " * @typedef {import('graphql').GraphQLResolveInfo} Info",
      " */",
      "",
      "/**",
      " * @param {*} root -",
      " * @param {Args} args -",
      " * @param {Context} ctx - Contexto del request.",
      " * @param {Info} info - Info del `resolve`.",
      " * @returns {Promise<Payload>} -",
      " * @example const data = resolve(root, args, ctx, info)",
      " */",
      "module.exports = async (root, args, ctx, info) => {",
      "  try {",
      "    // ... your code here",
      "    // dont forget remove await new Promise.resolve(",
      "    return await Promise.resolve({",
      "      status: {",
      "        success: true,",
      "        name: 'Petición exitosa',",
      "        detail: '',",
      "        code: 200",
      "      }",
      "    })",
      "  } catch (err) {",
      "    return Promise.resolve({",
      "      status: {",
      "        success: false,",
      "        name: 'Ocurrió un problema al consultar',",
      "        detail: err.message,",
      "        code: err.extensions ? parseInt(err.extensions.code, 10) : 500,",
      "        err",
      "      }",
      "    })",
      "  }",
      "}",
      "",
    ],
    "description": "Permite crear una estructura para un resolve de una query."
  },
  "Creando un resolve para una mutación": {
    "prefix": "apiMutation",
    "body": [
      "",
      "const { sequelize } = require('@eclass/sequelize-models')",
      "",
      "/**",
      " * @typedef {import('@eclass/api').Context} Context",
      " * @typedef {import('@eclass/api').$1CustomArgsArgs} Args",
      " * @typedef {import('@eclass/api').$2CustomPayload} Payload",
      " * @typedef {import('graphql').GraphQLResolveInfo} Info",
      " */",
      "",
      "/**",
      " * @param {*} root -",
      " * @param {Args} args -",
      " * @param {Context} ctx - Contexto del request.",
      " * @param {Info} info - Info del `resolve`.",
      " * @example const data = resolve(root, args, ctx, info)",
      " * @returns {Promise<Payload>} - .",
      " */",
      "module.exports = async (root, args, ctx, info) => {",
      "  try {",
      "    return await sequelize.transaction(async transaction => {",
      "      // ... your code here",
      "      // dont forget remove await new Promise.resolve(",
      "      return await Promise.resolve({",
      "        status: {",
      "          success: true,",
      "          name: 'Peticion Exitosa',",
      "          detail: '',",
      "          code: 200",
      "        }",
      "      })",
      "    })",
      "  } catch (err) {",
      "    return Promise.resolve({",
      "      status: {",
      "        success: false,",
      "        name: 'Ha ocurrido un error al [COMPLETE OUR DESCRIPTION]',",
      "        detail: err.message,",
      "        code: err.extensions ? parseInt(err.extensions.code, 10) : 500,",
      "        err",
      "      }",
      "    })",
      "  }",
      "}",
      ""
    ],
    "description": "Permite crear una estructura para un resolve de una mutación."
  },
  "Crear un input base": {
    "prefix": "apiInput",
    "body": [
      "import {",
      "  GraphQLInputObjectType,",
      "  GraphQLInt,",
      "  GraphQLNonNull",
      "} from 'graphql/type'",
      "",
      "/**",
      " * Lorem ipsum dolor sit amet",
      " *",
      " * fields:",
      " * - sample: number",
      " */",
      "export default new GraphQLInputObjectType({",
      "  name: 'SampleInput', // change this name, is unique in your app",
      "  description: '',",
      "  fields: {",
      "    sample: {",
      "      description: '',",
      "      type: new GraphQLNonNull(GraphQLInt)",
      "    }",
      "  }",
      "})",

    ],
    "description": "Permite crear una estructura para un archivo que será un input."
  },
  "Crear un payload base": {
    "prefix": "apiPayload",
    "body": [
      "import { GraphQLObjectType, GraphQLNonNull, GraphQLBoolean } from 'graphql/type'",
      "",
      "/**",
      " * Objeto de retorno del módulo.",
      " */",
      "export default new GraphQLObjectType({",
      "  name: 'SamplePayload', // change this name, is unique in your app",
      "  description: '',",
      "  fields: {",
      "    status: {",
      "      description: '',",
      "      type: new GraphQLNonNull(GraphQLBoolean)",
      "    }",
      "  }",
      "})",
    ],
    "description": "Permite crear una estructura para un archivo que será un payload"
  },
}
