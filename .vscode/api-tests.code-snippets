{
  "Creando test para input / payload": {
    "prefix": "testInput",
    "body": [
      "'use strict'",
      "",
      "const { GraphQLNonNull } = require('graphql/type')",
      "const { describe } = require('mocha')",
      "const utilTestFields = require('../../../../../../../test/utils/utilTestFields')",
      "",
      "const { GraphQLInt } = require('graphql/type')",
      "",
      "const Module = require('./${TM_FILENAME/[\\.-]/./g}')",
      "const Fields = Module.getFields()",
      "",
      "const { RequestStatusObject } = require('../../../../Utils/Types/')",
      "",
      "describe('PATH_TO_FILE', () => {",
      "  const inputToTest = [",
      "    {",
      "      field: Fields.status,",
      "      type: new GraphQLNonNull(RequestStatusObject)",
      "    }",
      "  ]",
      "",
      "  utilTestFields(Module, inputToTest, '$1Payload', 0)",
      "})",
      ""
    ],
    "description": "Crea la estructura base de un archivo para testear input/payload."
  },
  "Creando test index": {
    "prefix": "testIndex",
    "body": [
      "const { describe } = require('mocha')",
      "const { utilTestIndex, loaderGraphql } = require('../../../../../../test/utils')",
      "",
      "// Integrate module",
      "const input = require('./Type/input')",
      "const payload = require('./Type/payload')",
      "const Module = require('./index')",
      "",
      "const { gql } = loaderGraphql(module.path, './$2.gql')",
      "",
      "const args = {",
      "  [input.name]: {",
      "    param1: 1,",
      "  }",
      "}",
      "",
      "describe('PATH_TO_FILE', () => {",
      "  utilTestIndex(",
      "    '$2',",
      "    Module,",
      "    { input, payload },",
      "    { gql, args },",
      "    'MUTATION',",
      "    ['status', 'custom$3']",
      "  )",
      "})",
    ],
    "description": "Crea la estructura base de un archivo para testear los index."
  },
  "Creando test function": {
    "prefix": "testResolve",
    "body": [
      "'use strict'",
      "",
      "const { describe, it, before, beforeEach } = require('mocha')",
      "const { expect } = require('chai')",
      "const { utilContext } = require('../../../../../../../test/utils')",
      "",
      "const resolve = require('./resolve')",
      "describe('PATH_TO_FILE', () => {",
      "  const ctx = utilContext()",
      "",
      "  before(async () => {",
      "    await sequelize.sync()",
      "  })",
      "  beforeEach(async () => {",
      "    await Promise.resolve('')",
      "  })",
      "  it('Test case 1', () => {",
      "    const sample = resolve()",
      "    expect(1).to.equal(200)",
      "  })",
      "})",
    ],
    "description": "Crea la estructura base de un archivo para testear los resolver o funciones con lÃ³gica de negocio."
  },
  "Creando test para archivos GraphQLEnumType": {
    "prefix": "testEnum",
    "body": [
      "'use strict'",
      "",
      "const { describe } = require('mocha')",
      "const { utilTestEnum } = require('../../../../../../../test/utils')",
      "",
      "const Module = require('./enumModulePath')",
      "",
      "describe('PATH_TO_FILE', () => {",
      "  const keys = [",
      "    'SAMPLE',",
      "    'SAMPLE2'",
      "  ]",
      "  const values = [1, 2]",
      "  utilTestEnum('$1', { Module, keys, values })",
      "})",
    ],
    "description": "Crea la estructura base de un archivo para testear los GraphQLEnumType."
  },
}
